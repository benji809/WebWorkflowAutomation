var {cleandata,getid} = require('../common/utils.js');
var {userhasreachedmaxwf,getcurrentoffer} = require('../common/subscriptions.js')
const {sendemail} = require('../common/mail.js');
var {sessions} = require('../common/data.js')
const {user,sub,workflow,run}  = require ('/home/benji/Documents/WebWorkflowAutomation/orm.js');
const { launch } = require('puppeteer');
const {killsession} = require ('../emulator/utils.js')

exports.docreatewf = async function (req) 
{

    try{


    if(await userhasreachedmaxwf(req)) return "NOK";
    
    var name = req.query.name;if(name == undefined || name == "") return;
    var startm = cleandata(req.query.startm);if(startm== undefined || startm == "") return;

    if(startm == 1) startm = 2;

    var sm = cleandata(req.query.sendemail);if(sm == undefined || sm == "") return;
    var every = cleandata(req.query.every);

    var starttime = null;
    if(req.query.starttime != "") starttime = new Date(req.query.starttime).toISOString().slice(0,19).replace('T',' ') + ".000000";

    var wf = JSON.parse(req.query.wf);
    var wftxt = JSON.parse(req.query.wftxt);

    // check if user has not tampered with data // to be reviwed because it can interfers with other actions...
    if((await getcurrentoffer(req)).screenshotallowed == 0 && (req.query.wf.includes("SCE") || req.query.wf.includes("SCNE"))) return "NOK";
    if((await getcurrentoffer(req)).attributeallowed == 0 && (req.query.wf.includes("EVE") || req.query.wf.includes("EVNE") || req.query.wf.includes("EVI") || req.query.wf.includes("EVNI"))) return "NOK";

    var screenshot = "";

    if(req.query.wf.includes("SCE") || req.query.wf.includes("SCNE")) screenshot = sessions.get(req.session.id).screenshot;


    await workflow.create({ 
        wf : wf,
        launcha: startm,
        startdate : starttime,
        every : every,
        sendemail : sm,
        name : name,
        userid: getid(req) ,
        wftxt : wftxt,
        screenshot : screenshot,
        startm : 0
     });

     var record = await user.update(
        { 
            fwfcreated : 1,
        },
        {
          where: {
            fwfcreated : 0,
            id: getid(req)
          },
        },
      );

    if(record[0] == 1) await sendemail (req.session.email,"fwfcreated",[["#FIRSTNAME",req.session.fname]],"You have created your first workflow.");
    if(await userhasreachedmaxwf(req)) await sendemail (req.session.email,"maxwfreached",[["#FIRSTNAME",req.session.fname]],"You have reached the maximum number of workflows.");

    killsession(req.session.id);

    return "OK";
    }
    catch(e)
    {
        
        console.error(e);
        return "NOK";
    }
}

exports.dologout = function (req)
{
    req.session.isLoggedIn = false;
    req.session.userid = -1;
    req.session.email = "";
    return "OK";
}

exports.deletewf = async function (req) //secured
{
    var key = req.query.key;
    if(key == "") return;

    await workflow.destroy({
        where: {
          id: key
        },
      });

    await run.destroy({
        where: {
          workflowid: key
        },
      });

      
    return "OK";
} 
exports.togglewf = async function (req) // secured
{
    var key = req.query.key;
    if(key == "") return;

    var row = await workflow.findOne( { where: {
        id: key,userid : getid(req)
      }})

    if(row === null) return "NOK";

    var result = false;

    if(row.launcha == 2) result = await row.update({launcha : 1});
    else if(row.launcha  == 1) result = await row.update({launcha : 2});
    else if(row.startm == 0) result = await row.update({startm : 1});
    else if(row.startm == 1) result = await row.update({startm : 0});

    return "OK";
}

